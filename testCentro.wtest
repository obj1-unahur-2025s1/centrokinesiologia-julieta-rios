import aparatos.*
import pacientes.*

describe "Tests parte 1" {
  const leo = new Paciente(edad = 40, dolor = 10, fortaleza = 20)
  const mile = new Paciente(edad = 3, dolor = 30, fortaleza = 50)
  const magneto = new Magneto()
  const bici = new Bicicleta()
  const mini = new Minitramp()

  test "Leo puede usar los tres aparatos creados, mientras que Milena puede usar sólo el magneto" {
    assert.that(leo.puedeUsar(magneto))
    assert.that(leo.puedeUsar(bici))
    assert.that(leo.puedeUsar(mini))
    assert.that(mile.puedeUsar(magneto))
    assert.notThat(mile.puedeUsar(bici))
    assert.notThat(mile.puedeUsar(mini))
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9."{
    leo.usar(magneto)
    assert.equals(9,leo.dolor())
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Milena baja a 27."{
    mile.usar(magneto)
    assert.equals(27,mile.dolor())
  }

  test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6, y la fortaleza sube a 23."{
    leo.usar(bici)
    assert.equals(6,leo.dolor())
    assert.equals(23,leo.fortaleza())
  }

  test "Después de usar el minitramp una vez, la fortaleza de Leonardo sube a 24."{
    leo.usar(mini)
    assert.equals(24,leo.fortaleza())
  }
}

describe "Tests parte 2"{
  const leo = new Paciente(edad = 40, dolor = 10, fortaleza = 20, rutina = [magneto, bici, mini])
  const mile = new Paciente(edad = 3, dolor = 30, fortaleza = 50, rutina = [magneto,bici])
  const magneto = new Magneto()
  const bici = new Bicicleta()
  const mini = new Minitramp()

  test "Leonardo puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 5, y su fortaleza sube a 27."{
    assert.that(leo.puedeHacerRutina())
    leo.realizarRutina()
    assert.equals(5,leo.dolor())
    assert.equals(27,leo.fortaleza())
  }

  test "Milena no puede hacer la rutina que tiene asignada."{
    assert.notThat(mile.puedeHacerRutina())
  }
}

describe "Tests parte 3"{
  const magneto = new Magneto()
  const magnetoVerde = new Magneto(color = "verde")
  const bici = new Bicicleta()
  const biciRoja = new Bicicleta(color = "rojo")
  const mini = new Minitramp()
  const nico = new Resistente(edad = 40, dolor = 10, fortaleza = 20, rutina = [magneto, bici, mini])
  const vico = new Caprichoso(edad = 30, dolor = 10, fortaleza = 40, rutina = [magneto,bici, mini])
  const juli = new Caprichoso(edad = 20, dolor = 54, fortaleza = 50, rutina = [biciRoja, magnetoVerde, bici])
  const zoe = new RapidaRecuperacion(edad = 50, dolor = 14, fortaleza = 40, rutina = [magneto, bici, mini])

  test "Nico puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 5, y su fortaleza sube a 30."{
    assert.that(nico.puedeHacerRutina())
    nico.realizarRutina()
    assert.equals(5,nico.dolor())
    assert.equals(30,nico.fortaleza())
  }

  test "Victoria no puede hacer la rutina que tiene asignada."{
    assert.notThat(vico.puedeHacerRutina())
  }

  test "Julian puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 29.3, y su fortaleza sube a 62."{
    assert.that(juli.puedeHacerRutina())
    juli.realizarRutina()
    assert.equals(29.3,juli.dolor())
    assert.equals(62,juli.fortaleza())
  }

  test "Zoe puede hacer la rutina que tiene asignada. Después de asignar a 2 el valor de decremento de dolor para pacientes de rápida recuperación, y de que Zoe haga su rutina una vez, su nivel de dolor baja a 6.6, y su fortaleza sube a 48."{
    nivelDeDolor.cantidad(2)
    zoe.realizarRutina()
    assert.equals(6.6,zoe.dolor())
    assert.equals(48,zoe.fortaleza())
  }
}